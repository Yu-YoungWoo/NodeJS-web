#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("test:server");
var http = require("http");
var https = require("https");
// const http2 = require('http2');


/**
 * Https openssl key
 */

const fs = require("fs");
const options = {
  key: fs.readFileSync("./conf/rootca.key"),
  cert: fs.readFileSync("./conf/rootca.crt"),
};

/**
 * Get port from environment and store in Express.
 */

var httpsPort = normalizePort(process.env.HTTPS_PORT || "3000");
app.set("httpsPort", httpsPort);

// http2 Port
// var http2Port = normalizePort(process.env.HTTP2_PORT);
// app.set("http2Port", http2Port);


/**
 * Create HTTP server.
 */

var server_https = https.createServer(options, app);

// var http2Port = http2.createSecureServer(options, app);

/**
 * Listen on provided port, on all network interfaces. (HTTP)
 */

server_https.listen(httpsPort, function () {
  console.log(`Https server Connect PORT : ${httpsPort}`);
});
server_https.on("error", onError);
server_https.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof httpsPort === "string" ? "Pipe " + httpsPort : "Port " + httpsPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server_https.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
